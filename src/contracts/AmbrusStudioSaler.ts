/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from './common'

export interface AmbrusStudioSalerInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'WITHDRAWER_ROLE()': FunctionFragment
    'boughtCount(address)': FunctionFragment
    'configMaxSaleCountPerAddress(uint16)': FunctionFragment
    'configPrice(uint256)': FunctionFragment
    'configSale(uint256,uint256)': FunctionFragment
    'count()': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'grantAdmin(address)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'grantWithdrawer(address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'isWhitelistAddress(address,bytes32[])': FunctionFragment
    'maxSaleCountPerAddress()': FunctionFragment
    'merkleRoot()': FunctionFragment
    'nft()': FunctionFragment
    'price()': FunctionFragment
    'publicSale()': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeAdmin(address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'revokeWithdrawer(address)': FunctionFragment
    'saleStart()': FunctionFragment
    'setMerkleRoot(bytes32)': FunctionFragment
    'soldCount()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'whitelistSale(bytes32[])': FunctionFragment
    'whitelistSaleDuration()': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'WITHDRAWER_ROLE'
      | 'boughtCount'
      | 'configMaxSaleCountPerAddress'
      | 'configPrice'
      | 'configSale'
      | 'count'
      | 'getRoleAdmin'
      | 'grantAdmin'
      | 'grantRole'
      | 'grantWithdrawer'
      | 'hasRole'
      | 'isWhitelistAddress'
      | 'maxSaleCountPerAddress'
      | 'merkleRoot'
      | 'nft'
      | 'price'
      | 'publicSale'
      | 'renounceRole'
      | 'revokeAdmin'
      | 'revokeRole'
      | 'revokeWithdrawer'
      | 'saleStart'
      | 'setMerkleRoot'
      | 'soldCount'
      | 'supportsInterface'
      | 'whitelistSale'
      | 'whitelistSaleDuration'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'WITHDRAWER_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'boughtCount', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'configMaxSaleCountPerAddress',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'configPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'configSale',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'count', values?: undefined): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'grantAdmin', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'grantWithdrawer', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'isWhitelistAddress',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string
  encodeFunctionData(functionFragment: 'maxSaleCountPerAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string
  encodeFunctionData(functionFragment: 'price', values?: undefined): string
  encodeFunctionData(functionFragment: 'publicSale', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'revokeAdmin', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'revokeWithdrawer', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'saleStart', values?: undefined): string
  encodeFunctionData(functionFragment: 'setMerkleRoot', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'soldCount', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'whitelistSale',
    values: [PromiseOrValue<BytesLike>[]]
  ): string
  encodeFunctionData(functionFragment: 'whitelistSaleDuration', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'WITHDRAWER_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'boughtCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'configMaxSaleCountPerAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'configPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'configSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'count', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantWithdrawer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isWhitelistAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxSaleCountPerAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'price', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'publicSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeWithdrawer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'saleStart', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMerkleRoot', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'soldCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistSaleDuration', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
}

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface AmbrusStudioSaler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: AmbrusStudioSalerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    WITHDRAWER_ROLE(overrides?: CallOverrides): Promise<[string]>

    boughtCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>

    configMaxSaleCountPerAddress(
      _maxSaleCountPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    configPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    configSale(
      _saleStart: PromiseOrValue<BigNumberish>,
      _whitelistSaleDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    count(overrides?: CallOverrides): Promise<[BigNumber]>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

    grantAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    grantWithdrawer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isWhitelistAddress(
      _address: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>

    maxSaleCountPerAddress(overrides?: CallOverrides): Promise<[number]>

    merkleRoot(overrides?: CallOverrides): Promise<[string]>

    nft(overrides?: CallOverrides): Promise<[string]>

    price(overrides?: CallOverrides): Promise<[BigNumber]>

    publicSale(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revokeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revokeWithdrawer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    saleStart(overrides?: CallOverrides): Promise<[BigNumber]>

    setMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    soldCount(overrides?: CallOverrides): Promise<[BigNumber]>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    whitelistSale(
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    whitelistSaleDuration(overrides?: CallOverrides): Promise<[BigNumber]>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  WITHDRAWER_ROLE(overrides?: CallOverrides): Promise<string>

  boughtCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>

  configMaxSaleCountPerAddress(
    _maxSaleCountPerAddress: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  configPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  configSale(
    _saleStart: PromiseOrValue<BigNumberish>,
    _whitelistSaleDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  count(overrides?: CallOverrides): Promise<BigNumber>

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

  grantAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  grantWithdrawer(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  isWhitelistAddress(
    _address: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>

  maxSaleCountPerAddress(overrides?: CallOverrides): Promise<number>

  merkleRoot(overrides?: CallOverrides): Promise<string>

  nft(overrides?: CallOverrides): Promise<string>

  price(overrides?: CallOverrides): Promise<BigNumber>

  publicSale(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revokeAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revokeWithdrawer(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  saleStart(overrides?: CallOverrides): Promise<BigNumber>

  setMerkleRoot(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  soldCount(overrides?: CallOverrides): Promise<BigNumber>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  whitelistSale(
    _signature: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  whitelistSaleDuration(overrides?: CallOverrides): Promise<BigNumber>

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    WITHDRAWER_ROLE(overrides?: CallOverrides): Promise<string>

    boughtCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>

    configMaxSaleCountPerAddress(
      _maxSaleCountPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    configPrice(_price: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    configSale(
      _saleStart: PromiseOrValue<BigNumberish>,
      _whitelistSaleDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    count(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    grantAdmin(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    grantWithdrawer(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    isWhitelistAddress(
      _address: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>

    maxSaleCountPerAddress(overrides?: CallOverrides): Promise<number>

    merkleRoot(overrides?: CallOverrides): Promise<string>

    nft(overrides?: CallOverrides): Promise<string>

    price(overrides?: CallOverrides): Promise<BigNumber>

    publicSale(overrides?: CallOverrides): Promise<void>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    revokeAdmin(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    revokeWithdrawer(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    saleStart(overrides?: CallOverrides): Promise<BigNumber>

    setMerkleRoot(_merkleRoot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

    soldCount(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    whitelistSale(_signature: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>

    whitelistSaleDuration(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    WITHDRAWER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    boughtCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    configMaxSaleCountPerAddress(
      _maxSaleCountPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    configPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    configSale(
      _saleStart: PromiseOrValue<BigNumberish>,
      _whitelistSaleDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    count(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    grantAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    grantWithdrawer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isWhitelistAddress(
      _address: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxSaleCountPerAddress(overrides?: CallOverrides): Promise<BigNumber>

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>

    nft(overrides?: CallOverrides): Promise<BigNumber>

    price(overrides?: CallOverrides): Promise<BigNumber>

    publicSale(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revokeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revokeWithdrawer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    saleStart(overrides?: CallOverrides): Promise<BigNumber>

    setMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    soldCount(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    whitelistSale(
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    whitelistSaleDuration(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    WITHDRAWER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    boughtCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    configMaxSaleCountPerAddress(
      _maxSaleCountPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    configPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    configSale(
      _saleStart: PromiseOrValue<BigNumberish>,
      _whitelistSaleDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    grantAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    grantWithdrawer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isWhitelistAddress(
      _address: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxSaleCountPerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>

    publicSale(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revokeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revokeWithdrawer(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    saleStart(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    soldCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    whitelistSale(
      _signature: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    whitelistSaleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
